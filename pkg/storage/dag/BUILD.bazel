load("@rules_go//extras:gomock.bzl", "gomock")
load("@rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "dag",
    srcs = [
        "upload_dag.go",
        "uploader_server.go",
    ],
    importpath = "bonanza.build/pkg/storage/dag",
    visibility = ["//visibility:public"],
    deps = [
        "//pkg/ds",
        "//pkg/proto/storage/dag",
        "//pkg/storage/object",
        "//pkg/storage/tag",
        "//pkg/sync",
        "@com_github_buildbarn_bb_storage//pkg/program",
        "@com_github_buildbarn_bb_storage//pkg/util",
        "@org_golang_google_grpc//codes",
        "@org_golang_google_grpc//status",
        "@org_golang_google_protobuf//types/known/anypb",
        "@org_golang_x_sync//errgroup",
        "@org_golang_x_sync//semaphore",
    ],
)

go_test(
    name = "dag_test",
    srcs = [
        "mocks_dag_pb_test.go",
        "mocks_dag_test.go",
        "mocks_object_test.go",
        "mocks_tag_test.go",
        "upload_dag_test.go",
        "uploader_server_test.go",
    ],
    embed = [":dag"],
    deps = [
        "//pkg/proto/storage/dag",
        "//pkg/proto/storage/object",
        "//pkg/storage/object",
        "@com_github_buildbarn_bb_storage//pkg/testutil",
        "@com_github_stretchr_testify//require",
        "@org_golang_google_grpc//:grpc",
        "@org_golang_google_grpc//codes",
        "@org_golang_google_grpc//metadata",  # keep
        "@org_golang_google_grpc//status",
        "@org_golang_google_protobuf//types/known/anypb",
        "@org_golang_x_sync//semaphore",
        "@org_uber_go_mock//gomock",
    ],
)

gomock(
    name = "mocks_dag",
    out = "mocks_dag_test.go",
    interfaces = ["ObjectContentsWalker"],
    library = "//pkg/storage/dag",
    mockgen_model_library = "@org_uber_go_mock//mockgen/model",
    mockgen_tool = "@org_uber_go_mock//mockgen",
    package = "dag_test",
)

gomock(
    name = "mocks_dag_pb",
    out = "mocks_dag_pb_test.go",
    interfaces = [
        "UploaderClient",
        "Uploader_UploadDagsClient",
        "Uploader_UploadDagsServer",
    ],
    library = "//pkg/proto/storage/dag",
    mockgen_model_library = "@org_uber_go_mock//mockgen/model",
    mockgen_tool = "@org_uber_go_mock//mockgen",
    package = "dag_test",
)

gomock(
    name = "mocks_object",
    out = "mocks_object_test.go",
    interfaces = ["UploaderForTesting"],
    library = "//pkg/storage/object",
    mock_names = {"UploaderForTesting": "MockObjectUploader"},
    mockgen_model_library = "@org_uber_go_mock//mockgen/model",
    mockgen_tool = "@org_uber_go_mock//mockgen",
    package = "dag_test",
)

gomock(
    name = "mocks_tag",
    out = "mocks_tag_test.go",
    interfaces = ["UpdaterForTesting"],
    library = "//pkg/storage/tag",
    mock_names = {"UpdaterForTesting": "MockTagUpdater"},
    mockgen_model_library = "@org_uber_go_mock//mockgen/model",
    mockgen_tool = "@org_uber_go_mock//mockgen",
    package = "dag_test",
)
