load("@rules_go//extras:gomock.bzl", "gomock")
load("@rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "evaluation",
    srcs = [
        "computer.go",
        "environment.go",
        "executor.go",
        "leak_checking_computer.go",
        "recursive_computer.go",
        "recursive_computer_queues.go",
    ],
    importpath = "bonanza.build/pkg/model/evaluation",
    visibility = ["//visibility:public"],
    deps = [
        "//pkg/model/core",
        "//pkg/model/core/btree",
        "//pkg/model/core/buffered",
        "//pkg/model/encoding",
        "//pkg/model/executewithstorage",
        "//pkg/model/parser",
        "//pkg/proto/model/core",
        "//pkg/proto/model/evaluation",
        "//pkg/proto/remoteworker",
        "//pkg/proto/storage/dag",
        "//pkg/remoteworker",
        "//pkg/storage/object",
        "//pkg/storage/object/namespacemapping",
        "@com_github_buildbarn_bb_storage//pkg/clock",
        "@com_github_buildbarn_bb_storage//pkg/program",
        "@com_github_buildbarn_bb_storage//pkg/util",
        "@org_golang_google_grpc//codes",
        "@org_golang_google_grpc//status",
        "@org_golang_google_protobuf//proto",
        "@org_golang_google_protobuf//types/known/timestamppb",
        "@org_golang_x_sync//semaphore",
    ],
)

go_test(
    name = "evaluation_test",
    srcs = [
        "mocks_evaluation_test.go",
        "recursive_computer_test.go",
    ],
    embed = [":evaluation"],
    deps = [
        "//pkg/model/core",
        "//pkg/storage/object",
        "@com_github_buildbarn_bb_storage//pkg/clock",
        "@com_github_buildbarn_bb_storage//pkg/program",
        "@com_github_buildbarn_bb_storage//pkg/testutil",
        "@com_github_stretchr_testify//require",
        "@org_golang_google_protobuf//proto",
        "@org_golang_google_protobuf//reflect/protoreflect",  # keep
        "@org_golang_google_protobuf//types/known/emptypb",
        "@org_golang_google_protobuf//types/known/wrapperspb",
        "@org_uber_go_mock//gomock",
    ],
)

gomock(
    name = "mocks_evaluation",
    out = "mocks_evaluation_test.go",
    interfaces = [
        "ComputerForTesting",
        "ObjectManagerForTesting",
    ],
    library = "//pkg/model/evaluation",
    mockgen_model_library = "@org_uber_go_mock//mockgen/model",
    mockgen_tool = "@org_uber_go_mock//mockgen",
    package = "evaluation_test",
)
