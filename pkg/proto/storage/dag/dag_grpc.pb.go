// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: bonanza.build/pkg/proto/storage/dag/dag.proto

package dag

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Uploader_UploadDags_FullMethodName = "/bonanza.storage.dag.Uploader/UploadDags"
)

// UploaderClient is the client API for Uploader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploaderClient interface {
	UploadDags(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UploadDagsRequest, UploadDagsResponse], error)
}

type uploaderClient struct {
	cc grpc.ClientConnInterface
}

func NewUploaderClient(cc grpc.ClientConnInterface) UploaderClient {
	return &uploaderClient{cc}
}

func (c *uploaderClient) UploadDags(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UploadDagsRequest, UploadDagsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Uploader_ServiceDesc.Streams[0], Uploader_UploadDags_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadDagsRequest, UploadDagsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Uploader_UploadDagsClient = grpc.BidiStreamingClient[UploadDagsRequest, UploadDagsResponse]

// UploaderServer is the server API for Uploader service.
// All implementations should embed UnimplementedUploaderServer
// for forward compatibility.
type UploaderServer interface {
	UploadDags(grpc.BidiStreamingServer[UploadDagsRequest, UploadDagsResponse]) error
}

// UnimplementedUploaderServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUploaderServer struct{}

func (UnimplementedUploaderServer) UploadDags(grpc.BidiStreamingServer[UploadDagsRequest, UploadDagsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadDags not implemented")
}
func (UnimplementedUploaderServer) testEmbeddedByValue() {}

// UnsafeUploaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploaderServer will
// result in compilation errors.
type UnsafeUploaderServer interface {
	mustEmbedUnimplementedUploaderServer()
}

func RegisterUploaderServer(s grpc.ServiceRegistrar, srv UploaderServer) {
	// If the following call pancis, it indicates UnimplementedUploaderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Uploader_ServiceDesc, srv)
}

func _Uploader_UploadDags_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UploaderServer).UploadDags(&grpc.GenericServerStream[UploadDagsRequest, UploadDagsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Uploader_UploadDagsServer = grpc.BidiStreamingServer[UploadDagsRequest, UploadDagsResponse]

// Uploader_ServiceDesc is the grpc.ServiceDesc for Uploader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Uploader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bonanza.storage.dag.Uploader",
	HandlerType: (*UploaderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadDags",
			Handler:       _Uploader_UploadDags_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bonanza.build/pkg/proto/storage/dag/dag.proto",
}
