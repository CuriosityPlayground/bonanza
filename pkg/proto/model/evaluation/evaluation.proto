syntax = "proto3";

package bonanza.model.evaluation;

import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";
import "pkg/proto/model/core/core.proto";

option go_package = "bonanza.build/pkg/proto/model/evaluation";

// Remote evaluation.
//
// This package provides action and result types that a worker can
// implement if it supports Skyframe-like parallel evaluation
// (https://bazel.build/reference/skyframe).
//
// The client can provide a set of keys for which it wants the worker to
// compute its values. Furthermore, it can provide overrides for keys,
// forcing the evaluation to use a value that was already compute
// previously.
//
// This API can be thought of as the bottom half of a build system.
// Namely, it provides a mechanism for starting builds and specifying
// what needs to be built. Semantics for how a build behaves (e.g.,
// interpreting BUILD and .bzl files) should be implemented as a layer
// on top of this.

message Keys {
  message Parent {
    bonanza.model.core.DecodableReference reference = 1
        [(bonanza.model.core.object_format) = {
          proto_list_type_name:
            "bonanza.model.evaluation.Keys";
        }];
  }

  oneof level {
    // A single key that can be provided to the evaluation function.
    bonanza.model.core.Any leaf = 1;

    // B-tree node containing additional keys.
    Parent parent = 2;
  }
}

message Evaluation {
  message Parent {
    // Reference of the object containing additional Evaluation objects.
    bonanza.model.core.DecodableReference reference = 1
        [(bonanza.model.core.object_format) = {
          proto_list_type_name:
            "bonanza.model.evaluation.Evaluation";
        }];

    // SHA-256 hash key of the first leaf Evaluation object contained in
    // this tree to aid lookups. All Evaluation objects are sorted by
    // hash of the key. A byte sequence for the key is obtained by
    // calling model_core.MarshalTopLevelMessage() against the anypb.Any
    // message.
    bytes first_key_sha256 = 2;
  }

  message Leaf {
    // The key that was provided to the computer.
    bonanza.model.core.Any key = 1;

    // The value that was emitted by the computer for the given key.
    //
    // This field may be left unset if the computer yielded a native
    // (non-message) value.
    bonanza.model.core.Any value = 2;

    // Keys of dependencies that were accessed by the computer while
    // processing the current key.
    repeated Keys dependencies = 3;
  }

  oneof level {
    // A single Evaluation object.
    Leaf leaf = 1;

    // B-tree node containing additional Evaluation objects.
    Parent parent = 2;
  }
}

message Action {
  // If set, keys for which the evaluation function should not be
  // invoked. Instead, literal values are provided.
  bonanza.model.core.DecodableReference overrides_reference = 1
      [(bonanza.model.core.object_format) = {
        proto_list_type_name:
          "bonanza.model.evaluation.Evaluation";
      }];

  // Keys for which evaluation function should be invoked.
  repeated Keys requested_keys = 2;
}

message Progress {
  message EvaluatingKey {
    // The input message that is provided to the evaluation function.
    bonanza.model.core.Any key = 1;

    // The time at which the first attempt was started to evaluate this
    // key. Evaluation may have stopped due to dependencies whose values
    // have not been computed yet.
    google.protobuf.Timestamp first_evaluation_start = 2;

    // The time at which the current attempt was started.
    google.protobuf.Timestamp current_evaluation_start = 3;

    // The number of times a previous attempt was made to evaluate this
    // key, but failed due missing dependencies.
    uint32 restarts = 4;
  }

  // The number of keys for which evaluation has completed.
  uint64 completed_keys_count = 1;

  // Keys for which the evaluation function is currently being executed,
  // sorted from oldest to newest. This list may be truncated if the
  // number of keys being processed is very large.
  repeated EvaluatingKey oldest_evaluating_keys = 2;

  // The number of keys for which the evaluation function is currently
  // being executed, which could not be stored in the list above.
  uint64 additional_evaluating_keys_count = 5;

  // The number of keys which are currently queued for execution.
  uint64 queued_keys_count = 3;

  // The number of keys which still need to be evaluated, but have not
  // been queued because one of their dependencies has not been
  // evaluated yet.
  uint64 blocked_keys_count = 4;
}

message Result {
  message Failure {
    // If set, the failure occurred while executing the evaluation
    // function. A stack trace of all keys leading up to the failure are
    // provided. The last element corresponds to the key whose
    // evaluation caused the failure.
    repeated bonanza.model.core.Any stack_trace_keys = 1;

    // Failure error message.
    google.rpc.Status status = 2;
  }

  // Details of the build failure, if any failure occurred.
  Failure failure = 1;

  // If set, list of outcomes of the keys that were evaluated during
  // this build.
  bonanza.model.core.DecodableReference outcomes_reference = 2
      [(bonanza.model.core.object_format) = {
        proto_list_type_name:
          "bonanza.model.evaluation.Evaluation";
      }];
}
