syntax = "proto3";

package bonanza.model.filesystem;

import "google/protobuf/wrappers.proto";
import "pkg/proto/model/core/core.proto";
import "pkg/proto/model/encoding/encoding.proto";

option go_package = "bonanza.build/pkg/proto/model/filesystem";

message Leaves {
  // The files in the directory. Files MUST be stored in alphabetical
  // order.
  repeated FileNode files = 1;

  // The symbolic links in the directory. Symbolic links MUST be
  // stored in alphabetical order.
  repeated SymlinkNode symlinks = 2;
}

message LeavesReference {
  // Reference to an object containing a Leaves message.
  bonanza.model.core.DecodableReference reference = 1
      [(bonanza.model.core.object_format) = {
        proto_type_name:
          "bonanza.model.filesystem.Leaves";
      }];

  // Value indicating up to how many levels the symbolic links contained
  // in the current directory escape it.
  google.protobuf.UInt32Value maximum_symlink_escapement_levels = 2;
}

message FileProperties {
  // The contents of the file. If the file is empty (i.e., zero bytes in
  // size), this field is left unset.
  FileContents contents = 1;

  // If true, the file is executable. This corresponds to the +x
  // permission bit present on UNIX file systems.
  bool is_executable = 2;
}

message FileNode {
  // The name of the file.
  string name = 1;

  // All properties of the file, except for its name.
  FileProperties properties = 2;
}

message SymlinkNode {
  // The name of the symbolic link.
  string name = 1;

  // The target of the symbolic link. The path separator used is a
  // forward slash. The target path can be relative to the parent
  // directory of the symbolic link, or it can be an absolute path
  // starting with a forward slash.
  string target = 2;
}

message DirectoryContents {
  oneof leaves {
    // The leaves are large enough, that it could not be inlined into
    // the current directory.
    LeavesReference leaves_external = 1;

    // The leaves are small enough, that its contents have been inlined.
    Leaves leaves_inline = 2;
  }

  // The subdirectories in the directory.
  repeated DirectoryNode directories = 3;
}

message Directory {
  oneof contents {
    // The contents of the directory are large enough, that it could not
    // be inlined into the current directory.
    DirectoryReference contents_external = 1;

    // The contents of the directory are small enough, that its contents
    // have been inlined.
    DirectoryContents contents_inline = 2;
  }
}

message DirectoryNode {
  // The name of the subdirectory.
  string name = 1;

  // The contents of the subdirectory.
  Directory directory = 2;
}

message DirectoryReference {
  // Reference to an object containing a Directory message.
  bonanza.model.core.DecodableReference reference = 1
      [(bonanza.model.core.object_format) = {
        proto_type_name:
          "bonanza.model.filesystem.DirectoryContents";
      }];

  // The number of subdirectories present in the directory. This value
  // needs to be provided to make the link count of directories accurate
  // when exposed through a virtual file system.
  uint32 directories_count = 2;

  // Value indicating up to how many levels the symbolic links contained
  // in this directory hierarchy escape the current directory.
  //
  // - When the field is left unset, it indicates that the directory
  //   hierarchy contains one or more symbolic links whose targets are
  //   absolute paths, or contain ".." components that are not within
  //   the leading part of the target (e.g., "a/b/../c").
  //
  // - When set to zero, it indicates that the directory hierarchy does
  //   not contain any symbolic links, or that any targets of symbolic
  //   links contained within do not contain a sufficient number of ".."
  //   components to escape the current directory.
  //
  // - When set to a value greater than zero, it indicates that the
  //   directory hierarchy contains symbolic links whose targets have
  //   a sufficient number of leading ".." components to escape the
  //   current directory. The value corresponds to the maximum number of
  //   leading ".." components minus the depth at which the symbolic
  //   link is stored.
  google.protobuf.UInt32Value maximum_symlink_escapement_levels = 3;
}

message FileContents {
  // Reference to the data contained in the file.
  oneof level {
    // The reference points to an object with a height greater than
    // zero, containing a list of FileContents messages. The file's
    // contents can be reobtained by concatenating the parts referenced
    // by this message.
    bonanza.model.core.DecodableReference file_contents_list_reference = 1
        [(bonanza.model.core.object_format) = {
          proto_list_type_name:
            "bonanza.model.filesystem.FileContents";
        }];

    // The reference points to an object of height zero, containing the
    // literal contents of the file.
    bonanza.model.core.DecodableReference chunk_reference = 2
        [(bonanza.model.core.object_format) = { raw: {} }];
  }

  // The total size of all chunks of data in this part of the file. The
  // size has to be greater than zero.
  uint64 total_size_bytes = 3;
}

message DirectoryAccessParameters {
  // Encoders that were used when creating objects containing Directory
  // and Leaves messages.
  repeated bonanza.model.encoding.BinaryEncoder encoders = 1;
}

message DirectoryCreationParameters {
  // Parameters that need to be used when either accessing or creating
  // objects containing Directory and Leaves messages.
  DirectoryAccessParameters access = 1;

  // The maximum size of Directory messages in bytes, prior to applying
  // any encoding steps.
  uint32 directory_maximum_size_bytes = 2;
}

message FileAccessParameters {
  // Encoders that were used when creating objects containing chunks of
  // data.
  repeated bonanza.model.encoding.BinaryEncoder chunk_encoders = 1;

  // Encoders that were used when creating objects containing lists of
  // FileContents messages.
  repeated bonanza.model.encoding.BinaryEncoder file_contents_list_encoders = 2;
}

message FileCreationParameters {
  // Parameters that need to be used when either accessing or creating
  // objects containing file contents.
  FileAccessParameters access = 1;

  // The minimum size of a chunk in bytes, prior to applying any
  // encoding steps. The resulting chunks may be smaller than the
  // minimum size, if and only if the file consists of a single chunk.
  uint32 chunk_minimum_size_bytes = 2;

  // The maximum size of a chunk in bytes, prior to applying any
  // encoding steps.
  //
  // This limit MUST be at least twice as large as the minimum size, as
  // it would be impossible to partition a file into chunks otherwise.
  // It is recommended to set it to about four times the minimum size,
  // so that the content defined chunking algorithm has enough freedom
  // to create chunks at optimal boundaries, while keeping the spread in
  // chunk sizes small.
  uint32 chunk_maximum_size_bytes = 3;

  // The minimum size of objects containing lists of FileContents
  // messages, prior to applying any encoding steps and deduplicating
  // any outgoing references.
  //
  // The resulting objects may be smaller than the minimum size, if and
  // only if the file consists of fewer chunks than are needed to reach
  // the limit.
  uint32 file_contents_list_minimum_size_bytes = 4;

  // The maximum size of objects containing lists of FileContents
  // messages, prior to applying any encoding steps and deduplicating
  // any outgoing references.
  //
  // The result objects may be larger than the maximum size, if further
  // partitioning a list of FileContents messages would violate the
  // minimum size or cause it to contain fewer than two parts. However,
  // if the maximum size is sufficiently large, this cannot occur in
  // practice.
  uint32 file_contents_list_maximum_size_bytes = 5;
}
