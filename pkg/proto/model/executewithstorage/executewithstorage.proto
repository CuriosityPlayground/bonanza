syntax = "proto3";

package bonanza.model.executewithstorage;

import "pkg/proto/model/core/core.proto";
import "pkg/proto/model/encoding/encoding.proto";
import "pkg/proto/storage/object/object.proto";

option go_package = "bonanza.build/pkg/proto/model/executewithstorage";

// Unlike REv2, our remote execution and remote worker protocols are
// completely decoupled from object storage. Actions and their results
// are just binary payloads. However, for most of our execution needs
// such a couple is desired. For example, bonanza_worker wants to
// receive an action that references a command and input. Upon
// completion, it wants to return captured output files. bonanza_builder
// wants to receive a build specification and return the full build
// results.
//
// This file declares a reusable action message payload that such
// workers can use. It contains all of the information that is needed
// for a worker to load a worker type specific action message from
// storage. By having the action message placed in storage, it can also
// easily reference other objects. This also ensures that messages sent
// via the scheduler remain bounded in size.
//
// As execution event and results are also backed by storage, this
// protocol are assumed to be of type WeakDecodableReference.
message Action {
  // The namespace in storage where the action is stored and where
  // results may be written.
  bonanza.storage.object.Namespace namespace = 1;

  // Encoders that were used to compress and/or encrypt the action.
  repeated bonanza.model.encoding.BinaryEncoder action_encoders = 2;

  // Reference to an object in storage describing the action to perform.
  bonanza.model.core.WeakDecodableReference action_reference = 3;

  // The format of the data contained in the action object. This can be
  // used by workers to reject actions that they are unable to process.
  bonanza.model.core.ObjectFormat action_format = 4;
}
