syntax = "proto3";

package bonanza.remoteexecution;

import "bonanza.build/pkg/proto/encryptedaction/encryptedaction.proto";

option go_package = "bonanza.build/pkg/proto/remoteexecution";

service Execution {
  rpc Execute(ExecuteRequest) returns (stream ExecuteResponse);
  rpc WaitExecution(WaitExecutionRequest) returns (stream ExecuteResponse);
}

message ExecuteRequest {
  // The action that the client requests is executed on a worker.
  bonanza.encryptedaction.Action action = 1;

  // The priority (relative importance) of this action. Generally, a
  // lower value means that the action should be run sooner than actions
  // having a greater priority value, but the interpretation of a given
  // value is server- dependent. A priority of 0 means the *default*
  // priority. Priorities may be positive or negative, and such actions
  // should run later or sooner than actions having the default
  // priority, respectively. The particular semantics of this field is
  // up to the server. In particular, every server will have their own
  // supported range of priorities, and will decide how these map into
  // scheduling policy.
  int32 priority = 2;
}

message WaitExecutionRequest {
  // Name of the operation to which to attach, obtained from an
  // ExecuteResponse message.
  string name = 1;
}

message ExecuteResponse {
  // Name of the operation to permit re-attaching using WaitExecution().
  string name = 1;

  message Queued {}

  message Executing {
    // The most recently execution event reported by the worker. This
    // field may be unset if the worker has not yet posted any execution
    // events since execution started, or if a previous ExecuteResponse
    // message in the current stream has already reported the last
    // event.
    //
    // There is no guarantee that the client receives all execution
    // events. The scheduler is permitted to discard events to reduce
    // load and network traffic. Workers should therefore ensure that
    //
    // When computing the event's ciphertext, the first byte of the
    // shared secret is XOR'ed with 2.
    bonanza.encryptedaction.Event last_event = 1;
  }

  message Completed {
    // The event reported by the worker upon completion.
    //
    // When computing the event's ciphertext, the first byte of the
    // shared secret is XOR'ed with 3.
    bonanza.encryptedaction.Event completion_event = 1;
  }

  oneof stage {
    // The operation is currently queued inside the scheduler.
    Queued queued = 2;

    // The operation is currently assigned to a worker and executing.
    Executing executing = 3;

    // The operation has finished executing on a worker. The scheduler
    // will terminate the stream afterwards.
    Completed completed = 4;
  }
}
