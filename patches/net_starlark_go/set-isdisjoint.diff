diff --git starlark/library.go starlark/library.go
index 58aa1c5..9f01dd6 100644
--- starlark/library.go
+++ starlark/library.go
@@ -145,6 +145,7 @@ var (
 		"difference":           NewBuiltin("difference", set_difference),
 		"discard":              NewBuiltin("discard", set_discard),
 		"intersection":         NewBuiltin("intersection", set_intersection),
+		"isdisjoint":           NewBuiltin("isdisjoint", set_isdisjoint),
 		"issubset":             NewBuiltin("issubset", set_issubset),
 		"issuperset":           NewBuiltin("issuperset", set_issuperset),
 		"pop":                  NewBuiltin("pop", set_pop),
@@ -2266,6 +2267,20 @@ func set_intersection(thread *Thread, b *Builtin, args Tuple, kwargs []Tuple) (V
 	return diff, nil
 }
 
+func set_isdisjoint(thread *Thread, b *Builtin, args Tuple, kwargs []Tuple) (Value, error) {
+	var other Iterable
+	if err := UnpackPositionalArgs(b.Name(), args, kwargs, 0, &other); err != nil {
+		return nil, err
+	}
+	iter := other.Iterate()
+	defer iter.Done()
+	diff, err := b.Receiver().(*Set).IsDisjoint(thread, iter)
+	if err != nil {
+		return nil, nameErr(b, err)
+	}
+	return Bool(diff), nil
+}
+
 // https://github.com/google/starlark-go/blob/master/doc/spec.md#set_issubset.
 func set_issubset(thread *Thread, b *Builtin, args Tuple, kwargs []Tuple) (Value, error) {
 	var other Iterable
diff --git starlark/testdata/builtins.star starlark/testdata/builtins.star
index a3d1ede..8fa1fcf 100644
--- starlark/testdata/builtins.star
+++ starlark/testdata/builtins.star
@@ -196,7 +196,7 @@ assert.eq(getattr(hf, "x"), 2)
 assert.eq(hf.x, 2)
 # built-in types can have attributes (methods) too.
 myset = set([])
-assert.eq(dir(myset), ["add", "clear", "difference", "discard", "intersection", "issubset", "issuperset", "pop", "remove", "symmetric_difference", "union", "update"])
+assert.eq(dir(myset), ["add", "clear", "difference", "discard", "intersection", "isdisjoint", "issubset", "issuperset", "pop", "remove", "symmetric_difference", "union", "update"])
 assert.true(hasattr(myset, "union"))
 assert.true(not hasattr(myset, "onion"))
 assert.eq(str(getattr(myset, "union")), "<built-in method union of set value>")
diff --git starlark/testdata/set.star starlark/testdata/set.star
index 9aa722b..d963298 100644
--- starlark/testdata/set.star
+++ starlark/testdata/set.star
@@ -287,3 +287,9 @@ assert.true(not set([1,2,3]) <= set([1,2,4]))
 # proper subset: set < set
 assert.true(set([1,2]) < set([1,2,3]))
 assert.true(not set([1,2,3]) < set([1,2,3]))
+
+# isdisjoint: set.isdisjoint(iterable)
+assert.true(set([1,2]).isdisjoint([3,4]))
+assert.true(not set([1,2]).isdisjoint(set([2,3])))
+assert.true(set([3,4]).isdisjoint([1,2]))
+assert.true(not set([2,3]).isdisjoint(set([1,2])))
diff --git starlark/value.go starlark/value.go
index a29362e..66ad932 100644
--- starlark/value.go
+++ starlark/value.go
@@ -351,7 +351,7 @@ type HasUnary interface {
 type HasAttrs interface {
 	Value
 	Attr(thread *Thread, name string) (Value, error) // returns (nil, nil) if attribute not present
-	AttrNames() []string             // callers must not modify the result.
+	AttrNames() []string                             // callers must not modify the result.
 }
 
 var (
@@ -1313,6 +1313,14 @@ func (s *Set) IsSuperset(thread *Thread, other Iterator) (bool, error) {
 	return true, nil
 }
 
+func (s *Set) IsDisjoint(thread *Thread, other Iterator) (bool, error) {
+	if count, err := s.ht.count(thread, other); err != nil {
+		return false, err
+	} else {
+		return count == 0, nil
+	}
+}
+
 func (s *Set) IsSubset(thread *Thread, other Iterator) (bool, error) {
 	if count, err := s.ht.count(thread, other); err != nil {
 		return false, err
